import DOMPurify from 'dompurify'

export default defineNuxtPlugin(async () => {
  const sanitizeOptions = {
    ADD_TAGS: [
      'math',
      'maction',
      'maligngroup',
      'malignmark',
      'menclose',
      'merror',
      'mfenced',
      'mfrac',
      'mglyph',
      'mi',
      'mlabeledtr',
      'mlongdiv',
      'mmultiscripts',
      'mn',
      'mo',
      'mover',
      'mpadded',
      'mphantom',
      'mroot',
      'mrow',
      'ms',
      'mscarries',
      'mscarry',
      'msgroup',
      'msline',
      'mspace',
      'msqrt',
      'msrow',
      'mstack',
      'mstyle',
      'msub',
      'msup',
      'msubsup',
      'mtable',
      'mtd',
      'mtext',
      'mtr',
      'munder',
      'munderover',
      'semantics',
      'annotation',
      'annotation-xml',

      'svg',
      'path',
      'line',
      'rect',
      'g',
      'use',
    ],
    ADD_ATTR: [
      'data-*',
      'class',
      'style',
      'd',
      'viewbox',
      'width',
      'height',
      'fill',
      'stroke',
      'stroke-width',
      'x',
      'y',
      'rx',
      'ry',
      'xlink:href',
      'xmlns',
      'xmlns:xlink',
      'encoding',
      'mathvariant',
      'accent',
      'href',
      'id',
      'accent',
      'accentunder',
      'align',
      'bevelled',
      'close',
      'columnalign',
      'columnlines',
      'columnspacing',
      'denomalign',
      'depth',
      'display',
      'displaystyle',
      'encoding',
      'fence',
      'frame',
      'largeop',
      'length',
      'linethickness',
      'lspace',
      'lquote',
      'mathbackground',
      'mathcolor',
      'mathsize',
      'mathvariant',
      'maxsize',
      'minsize',
      'movablelimits',
      'notation',
      'numalign',
      'open',
      'rowalign',
      'rowlines',
      'rowspacing',
      'rowspan',
      'rspace',
      'rquote',
      'scriptlevel',
      'scriptminsize',
      'scriptsizemultiplier',
      'selection',
      'separator',
      'separators',
      'stretchy',
      'subscriptshift',
      'supscriptshift',
      'symmetric',
    ],
  }

  const sanitize = ref()

  if (import.meta.server) {
    const { JSDOM } = await import('jsdom')
    sanitize.value = (dirty: string) =>
      DOMPurify(new JSDOM('').window).sanitize(dirty, sanitizeOptions)
  } else {
    sanitize.value = (dirty: string) =>
      DOMPurify.sanitize(dirty, sanitizeOptions)
  }

  return {
    provide: {
      sanitizeHTML: (dirty: string) => sanitize.value?.(dirty) ?? '',
    },
  }
})
